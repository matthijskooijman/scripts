#!/bin/bash

# This script accepts two files (.elf and/or avr-objdump output) and
# creates a diff of them. The dissassembly is preprocessed to remove a
# lot of absolute addresses, in order to minimize the noise in the diff
# due to reordered code.
#
# This script was originally written for AVR assembler, but also
# supports ARM assembler by now.

filter() {
  AGGRESSIVE=1
  awk "\
    BEGIN { FS=\"\\t\"; OFS=\"\\t\"; }
    /^[0-9a-z]+ <.+>:$/ { # Function headers
      sub(/^[0-9a-f]* /,\"\");
      sub(/constprop\.[0-9]+/, \"constprop.(...)\");
      sub(/\[clone \.lto_priv.[0-9]+\]/, \"[clone .lto-priv.nnn]\");
      sub(/\[clone \.isra.[0-9]+\]/, \"[clone .isra.nnn]\");
    };
    /^\s* [0-9a-z]+:/ {
      # Remove 1a2: prefixes
      \$1=\"\";
      # For calls/jumps/etc, remove all addresses. cbz etc. are for ARM
      # instead of AVR
      if (\$3 ~ /^ *(rjmp|jmp|rcall|call|br..)$/ ||
          \$3 ~ /^ *(cbz|cbnz|bl|bcc|bmi|b|ble|bls|bne|bhi|beq|bgt|bcs|blt|bge|bpl|bleq)(\\.n|\\.w|)$/) {
        # 9ac:      0c 94 63 40     jmp 0x80c6    ; 0x80c6 # <allReport()+0x12ab>
        # e0c:      02 c0           rjmp    .+4   ; 0xe12 # <__do_copy_data>
        # 4a2:      b14b            cbz     r3, 4b8      <frame_dummy+0x20>
        # 8ac:      09 f4           brne    .+2             ; 0x8b0 <schedRx12.lto_priv.156+0x50>

        gsub(/[0-9a-f]/, \"x\", \$2);
        # Use gensub to allow backreferences in replacement text
        \$4 = gensub(/(^|, )(0x)?[0-9a-f]+(,| )/, \"\\\\1\\\\2....\\\\3\", \"g\", \$4);
        sub(/\\+0x[0-9a-f]+>$/, \"+0x....>\", \$4);
        sub(/^; 0x[0-9a-f]+ /, \"; 0x....\", \$5);
        sub(/\\+0x[0-9a-f]+>$/, \"+0x....>\", \$5);
        sub(/constprop\.[0-9]+/, \"constprop.(...)\", \$5);
        sub(/\.lto_priv.[0-9]+/, \".lto-priv.nnn\", \$5);
        sub(/\[clone \.isra.[0-9]+\]/, \"[clone .isra.nnn]\", \$5);
      }
      # For loads and stores, remove addresses but leave registers
      if (\$3 ~ /^ *(lds|sts)$/) {
        # 123:       90 91 32 02     lds     r25, 0x0232     ; 0x800232 <SoftwareSerial::_receive_buffer_head>
        # 6ec:       10 92 93 05     sts     0x0593, r1      ; 0x800593 <twi_state.lto_priv.131>

        gsub(/[0-9a-f]/, \"x\", \$2);
        # Arguments to these instructions use uppercase hex for some reason
        gsub(/0x[0-9A-F]+/, \"0x....\", \$4);
        sub(/^; +0x[0-9a-f]+/, \"; 0x....\", \$5);
        sub(/\.lto_priv.[0-9]+/, \".lto-priv.nnn\", \$5);
      }
      # ARM uses ldr to load addresses for relative jumps, meaning we
      # can leave the offset, just have to clear the absolute address.
      if (\$3 ~ /^ *(ldr.*|add)$/ && \$4 ~ /pc/) {
        # 1d4:      4b4a            ldr     r3, [pc, #296]  ; (300 <ResetHandler+0x144>)
        # 958:      f8df 80a0       ldr.w   r8, [pc, #160]  ; 9fc <_ZN6IRrecv10decodeSonyEP14decode_results+0xa8>

        sub(/^; \\([0-9a-f]+ /, \"; (\", \$5);
        sub(/^; [0-9a-f]+ /, \"; \", \$5);
        if ($AGGRESSIVE) {
          # Also remove offsets of relative loads
          gsub(/[0-9a-f]/, \"x\", \$2);
          sub(/\\+0x[0-9a-f]+>/, \"+0x....>\", \$5);
          sub(/#[0-9]+/, \"#...\", \$4);
        }
      }
      if (\$3 ~ /^ *(add)$/ && \$5 ~ /^; \(adr /) {
        #  80029fe:       a33e            add     r3, pc, #248    ; (adr r3, 8002af8 <SX126x::setBandwidth(float)+0x130>)
        sub(/, [0-9a-f]+ /, \", .... \", \$5);
      }

      # ARM often uses lookup tables which might also contain addresses,
      # so remove those as well
      if ($AGGRESSIVE && \$3 ~ / *\.word$/) {
        # 80007d4:       000003ff        .word   0x000003ff
        gsub(/[0-9a-f]/, \"x\", \$2);
        gsub(/0x[0-9a-f]+/, \"0x....\", \$4);
      }

    }
    { print }" | expand
}

asm() {
	if file $1 | grep ELF.*Atmel.AVR >/dev/null; then
		avr-objdump --demangle -S $1
	elif file $1 | grep ELF >/dev/null; then
		objdump --demangle -S $1
	else
		# assume the file is output of avr-objdump already
		cat $1
	fi
}

FIRST="$1"
SECOND="$2"
shift; shift

if [ -n "$FIRST" -a -z "$SECOND" ]; then
  # If just one file passed, filter that (mainly useful during
  # development of this script)
  asm "$FIRST" | filter
else
  grc --colour=on diff -F '^<.*>:$' -u "$@" <(asm "$FIRST" | filter) <(asm "$SECOND" | filter)
fi
