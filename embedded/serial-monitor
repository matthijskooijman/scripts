#!/bin/bash
#
# Copyright 2014 Matthijs Kooijman <matthijs@stdin.nl>
#
# Permission is hereby granted, free of charge, to anyone obtaining a
# copy of this document and accompanying files, to do whatever they want
# with them without any restriction, including, but not limited to,
# copying, modification and redistribution.
#
# NO WARRANTY OF ANY KIND IS PROVIDED.

# This scripts starts minicom as a serial console for an Arduino board.
# It also automatically sets up logging to the ~/minicom.cap.ttyACMx
# file. It can be used to automatically stop and restart the serial
# console during uploads, see the accompanied serial-suspend script for
# details.
#
# Alternatively, you can quit minicom manually and then restart it by
# just pressing enter.

DEVICE=/dev/ttyACM0
BAUD=115200

for arg in "$@"; do
	if [ -c "$arg" ]; then
		DEVICE="$arg"
	elif [ -e /dev/"$arg" ]; then
		DEVICE=/dev/"$arg"
	elif [ -c /dev/serial/"$arg" ]; then
		DEVICE=/dev/serial/"$arg"
	elif [ -c /dev/serial/arduino-"$arg" ]; then
		DEVICE=/dev/serial/arduino-"$arg"
	elif [ -c /dev/ttyACM$arg ]; then
		DEVICE=/dev/ttyACM$arg
	elif [ -c /dev/ttyUSB$arg ]; then
		DEVICE=/dev/ttyUSB$arg
	elif [[ $arg =~ ^[0-9]+$ ]]; then
		BAUD=$arg
	else
		echo "Unknown argument ($arg). Examples: "
		echo "  $(basename $0) /dev/ttyUSB0 9600"
		echo "  $(basename $0) ttyUSB1"
		echo "  $(basename $0) 57600 ttyACM2"
		echo "  $(basename $0) 57600   # (opens ttyACM0)"
		echo "  $(basename $0) 1       # (opens /dev/ttyACM1 or /dev/ttyUSB1)"
		echo "  $(basename $0)         # (opens /dev/ttyACM0)"
		exit 1
	fi
done

# Resolve any symlinks
DEVICE=$(realpath  $DEVICE)

LOG=${HOME}/minicom.cap.$(basename ${DEVICE})
PIDFILE=/run/user/$(id -u)/serial-monitor.$(basename ${DEVICE}).pid
CHARSET=utf8

while true; do
	rm -f $LOG
	# This enables monitor mode, which (like when bash is
	# interactive) creates a process group for any external
	# commands, which then allows tmux to show that command rather
	# than just "bash". Then this uses exec -a to set the name of
	# the command to the device name (in a subshell so this script
	# continues after the exec).
	set -o monitor
	(exec -a "$DEVICE" minicom $MINICOM_OPTIONS --wrap -D $DEVICE -C $LOG -b $BAUD -R $CHARSET)
	set +o monitor
	echo "$(basename "$0") suspended - press enter to restart"
	# Wait for enter or USR1
	(trap exit USR1; sh -c 'echo $PPID' > $PIDFILE; read foo)
done
